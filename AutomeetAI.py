# Importamos o m√≥dulo streamlit com o alias 'st'.
# Isso nos permite usar 'st' para acessar as funcionalidades do Streamlit,
# que √© uma estrutura de aplica√ß√£o web para Python.
import streamlit as st

# Importamos a fun√ß√£o annotated_text para destaque de texto na aplica√ß√£o.
import annotated_text as annotated_text

# Importamos bibliotecas espec√≠ficas para integra√ß√£o com servi√ßos de IA e manipula√ß√£o de m√≠dia.
import assemblyai as aai
from openai import OpenAI

import uuid

# Importamos fun√ß√µes personalizadas para converter arquivos e manusear dados.
from mp4_to_mp3 import mp4_to_mp3
from mp3_to_text import mp3_to_text
from misc import deletar_arquivo_se_existir
from Chat_Com_OpenAi import generate_response

# Importamos um dicion√°rio com c√≥digos de idiomas para processamento de √°udio.
from assemblyai_language_codes import *


# Usamos a fun√ß√£o title() do Streamlit para colocar um t√≠tulo na nossa aplica√ß√£o web.
st.title('ü§ñ AutomeetAI')

# Usamos a fun√ß√£o write() para exibir um texto simples na p√°gina.
# Esta fun√ß√£o √© bastante vers√°til e pode tamb√©m mostrar dados e exibir gr√°ficos.
st.write('Automa√ß√£o de atas de reuni√£o com tecnologia de IA com Python.')



# Verifica se as chaves de API para AssemblyAI e OpenAI est√£o dispon√≠veis nos segredos (st.secrets).
if 'assemblyai' in st.secrets and 'api_key' in st.secrets['assemblyai'] and \
   'openai'     in st.secrets and 'api_key' in st.secrets['openai'] :

	# Recupera a chave de API para AssemblyAI dos segredos armazenados e a atribui √† vari√°vel `aai_api_key`.
	aai_api_key = st.secrets['assemblyai']['api_key']

	# Recupera a chave de API para OpenAI dos segredos armazenados e a atribui √† vari√°vel `openai_api_key`.
	openai_api_key = st.secrets['openai']['api_key']


else:

	# Caso as chaves n√£o estejam dispon√≠veis, cria uma interface de usu√°rio para entrada manual das chaves.

	# Adiciona uma linha horizontal para separar se√ß√µes no layout da aplica√ß√£o.
	st.divider()

	# Divide a p√°gina em duas colunas para entrada de API keys.
	col11, col12 = st.columns(2)

	with col11:
		# O m√©todo `text_input` √© usado para criar uma caixa de texto onde o usu√°rio pode inserir a chave de API.
		aai_api_key = st.text_input("AssemblyAI   ‚Ä¢   API key")

	with col12:
		# Outro m√©todo `text_input` semelhante ao anterior, mas desta vez para a chave de API do OpenAI.
		openai_api_key = st.text_input("OpenAI   ‚Ä¢   API key")




# Outra linha divis√≥ria para organiza√ß√£o visual.
st.divider()

# √Årea de texto para o prompt do sistema: o comportamento e papel do "assistente".
prompt_system = st.text_area("Forne√ßa instru√ß√µes gerais ou estabele√ßa o tom para o \"assistente\" de IA:", "Voc√™ √© um √≥timo gerente de projetos com grandes capacidades de cria√ß√£o de atas de reuni√£o.")

# √Årea de texto para o prompt do usu√°rio: o que o usu√°rio deseja que o assistente fa√ßa.
prompt_text = st.text_area("O que o usu√°rio deseja que o assistente fa√ßa?", """Em uma reda√ß√£o de n√≠vel especializado, resuma as notas da reuni√£o em um √∫nico par√°grafo.
Em seguida, escreva uma lista de cada um de seus pontos-chaves tratados na reuni√£o.
Por fim, liste as pr√≥ximas etapas ou itens de a√ß√£o sugeridos pelos palestrantes, se houver.""")


# Mais uma linha divis√≥ria para clareza visual.
st.divider()

# Novamente divide a p√°gina em duas colunas para configura√ß√µes adicionais.
col21, col22 = st.columns(2)

# Entrada num√©rica para o n√∫mero de falantes estimados no √°udio.
with col21:
	speakers_expected = st.number_input("Total de pessoas falantes:", 1, 15)

# Sele√ß√£o do idioma falado, usando a lista de c√≥digos de idiomas importados.
with col22:
	language = st.selectbox("Selecione o idioma falado:", tuple(language_codes.keys()))

# Componente de upload de arquivo para que o usu√°rio possa enviar um arquivo MP4.
uploaded_file = st.file_uploader("Selecione o seu arquivo", accept_multiple_files=False, type=['mp4'])


# Linha divis√≥ria abaixo do componente de upload.
st.divider()

# Se um arquivo foi carregado, executa o processamento.
if uploaded_file:

	with st.spinner('Convertendo de mp4 para mp3...'):

		# Obt√©m o nome do arquivo carregado
		mp4_filename = uploaded_file.name

		# Gera um nome √∫nico para o arquivo MP3 usando uuid (pseud√¥nimo universalmente √∫nico).
		mp3_filename = '{nome_arquivo}.mp3'.format(nome_arquivo=uuid.uuid4().hex)

		# Abre o arquivo temporariamente para leitura e escrita bin√°ria.
		tempfile = open(mp4_filename, 'wb')
		tempfile.write(uploaded_file.read())

		# Converte o arquivo MP4 para MP3.
		mp4_to_mp3(mp4_filename, mp3_filename)

	# Indica sucesso da convers√£o do MP4 para MP3.
	st.success("Convers√£o de MP4 para MP3 realizada!")



	with st.spinner('Convertendo de mp3 para texto...'):

		# Configura a chave da API para o AssemblyAI.
		aai.settings.api_key = aai_api_key

		# Converte o √°udio MP3 para texto.
		transcript = mp3_to_text(
			aai, 
			filename=mp3_filename,
			s_labels=True,  # Ativa os r√≥tulos para falantes.
			s_expected=speakers_expected,
			l_code=language_codes[language]
		)

		# Indica que o √°udio foi transcrito com sucesso.
		st.success("Transcri√ß√£o de √°udio para texto realizada!")


		# Inicializa vari√°veis para armazenar o texto transcrito e anotado.
		texto_transcrito = ''
		texto_anotado = []

		# Se a transcri√ß√£o foi bem-sucedida, exibe as falas dos falantes.
		if transcript:
			# Itera sobre as falas transcritas e imprime cada fala com o n√∫mero do falante.
			for utterance in transcript.utterances:
				# Exibe o n√∫mero do falante e o texto correspondente.
				texto_transcrito += f"Speaker {utterance.speaker}: {utterance.text}"
				texto_transcrito += '\n'

				# Adiciona o texto da fala junto com a identifica√ß√£o do falante.
				texto_anotado.append((utterance.text, f"Speaker {utterance.speaker}"))


	with st.spinner('Gerando ata de reuni√£o...'):

		# Inicializa o cliente OpenAI com sua chave de API.
		client = OpenAI(api_key=openai_api_key)

		# Inclui a transcri√ß√£o do √°udio no prompt de texto.
		prompt_text += '\n===========\n'
		prompt_text += texto_transcrito

		# Gera uma resposta com base nos prompts e na transcri√ß√£o.
		texto_retorno = generate_response(client, prompt_system, prompt_text)

		# Indica sucesso na gera√ß√£o da ata.
		st.success("Ata gerada com sucesso!")


	# Exibe a se√ß√£o de transcri√ß√£o original.
	st.subheader('Transcri√ß√£o original')

	# Mostra o texto anotado com os falantes diferenciados.
	annotated_text(texto_anotado)

	# Display da ata gerada na aplica√ß√£o.
	st.subheader('Ata gerada')
	st.markdown(texto_retorno)

	# Remove o arquivo MP3 tempor√°rio criado.
	deletar_arquivo_se_existir(mp3_filename)